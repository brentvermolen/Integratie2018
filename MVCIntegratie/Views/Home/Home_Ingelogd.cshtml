@model List<BL.Domain.Grafiek>

@{
   ViewBag.Title = "Home";
}

<link href="~/Content/bootstrap.min.css">
<link rel="stylesheet" href="~/Content/Layout.css">
<script src="~/Scripts/bootstrap.min.js"></script>
<script src="https://code.highcharts.com/highcharts.js"></script>
<script src="https://code.highcharts.com/modules/series-label.js"></script>
<script src="https://code.highcharts.com/modules/exporting.js"></script>
<script src="https://code.highcharts.com/modules/export-data.js"></script>
<script src="~/Scripts/jquery-3.0.0.min.js"></script>
<script src="~/Scripts/Chart.js"></script>
<script src="~/Scripts/IngelogdeGebruiker.js"></script>

<div id="zoekdiv" class="row">
   <form action="@Url.Action("Index", "Search")" method="post">
      <input type="text" id="zoekbar" name="search" class="form-control" placeholder="Zoeken..">
      <a href="@Url.Action("Index", "Graph")" id="newgraph" class="btn btn-success">Nieuwe Grafiek &raquo;</a>
   </form>

</div>

<div class="container">
   <div class="row">
      <div class="col-sm-6 col-md-6 content" data-id="nodeBox">
         <!--<div style="display:none" class="dragger" title="nodeBox" draggable="true" ondragstart="drag(event);"></div>-->
         <div id="nodeBox">
            <div>
               <img src="~/Images/nodebox.svg" draggable="false" style="height: 399px; width:100%;" />
            </div>
            <div tabindex="0" class="onclick-menu">
               <span class="glyphicon glyphicon-pencil"></span>
               <ul class="onclick-menu-content">
                  <li><button onclick="verwijder('nodeBox')">Verwijderen</button></li> <!--In gebruiker klassen een attribuut bool hasNodebox? if true => Show Nodebox-->
                  <li><button>Annuleren</button></li>
               </ul>
            </div>
         </div>
      </div>

      @foreach (var grafiek in Model)
      {
         <div class="col-sm-6 col-md-6 content grafiek" data-id="@grafiek.ID" ondrop="drop(event);" ondragover="allowDrop(event);" >
            <div style="display:none" class="dragger" title="@grafiek.ID" draggable="true" ondragstart="drag(event);"></div>
            <div id="@grafiek.ID" style="min-width: 310px; height: 400px; margin: 0 auto"></div>
            <div tabindex="0" class="onclick-menu">
               <span class="glyphicon glyphicon-pencil"></span>
               <ul class="onclick-menu-content">
                   <li><a href="@Url.Action("Wijzig", "Graph", new { id = grafiek.ID }, null)" style="color:white"><button onclick="bewerkGrafiek('@grafiek.ID')">Bewerken</button></a></li>
                   <li><button onclick="verwijder('@grafiek.ID')">Verwijderen</button></li>
                   <li><button onclick="alerttoevoegen('@grafiek.ID')">Alert toevoegen</button></li>
                   <li><button>Annuleren</button></li>
               </ul>
            </div>
         </div>
      }
   </div>
</div>

<div class="row">

   <input type="button" value="Wijzig Volgorde" onclick="enableDisableDragDrop(this);" class="btn btn-success"/>
   <input type="button" id="annuleerVolgorde" onclick="disableDragDrop()" value="Annuleer" style="display:none" class="btn btn-success"/>
</div>

<script>

    function alerttoevoegen(id) {
        class Alert {
            constructor(id) {
                this.id = id;
            }
        }

        var alert = new Alert(id);

        var json = naarJsonFormaat(alert);

        $.ajax('/api/IngelogdeGebruiker/alerttoevoegen', {
            type: 'POST',
            contentType: "application/json",
            accepts: 'application/json',
            data: json
        }).done(function (data) {
            window.location.reload();
        }).fail(function () {
            alert('Er is iets misgelopen tijdens het opslaan van de volgorde...');
        });
    }


   function enableDisableDragDrop(button) {
      var divs = document.getElementsByClassName("dragger");

      var annuleer = document.getElementById("annuleerVolgorde");

      for (var i = 0; i < divs.length; i++) {
         if (divs[i].style.display == "none") {
            divs[i].style.display = "block";
            button.value = "Volgorde Opslaan";
            annuleer.style.display = "block";
         } else {
            divs[i].style.display = "none";
            annuleer.style.display = "none";
            volgordeOpslaan();
            button.value = "Wijzig Opslaan";
         }
      }
   }

   function disableDragDrop(button) {
      window.location.reload();
   }

   function volgordeOpslaan() {
      class Volgorde {
         constructor(grafiek, volgorde) {
            this.grafiek = grafiek;
            this.volgorde = volgorde;
         }
      }

      var divs = document.getElementsByClassName("grafiek");
      var grafieken = [];
      var volgorde = [];

      for (var i = 0; i < divs.length; i++) {
         var id = $(divs[i]).attr("data-id");
         grafieken.push(id);
         volgorde.push(i);
      }

      var volg = new Volgorde(grafieken, volgorde);

      var json = naarJsonFormaat(volg);

      $.ajax('/api/NieuweGrafiek/WijzigVolgorde', {
         type: 'POST',
         contentType: "application/json",
         accepts: 'application/json',
         data: json
      }).done(function (data) {
         window.location.reload();
      }).fail(function () {
         alert('Er is iets misgelopen tijdens het opslaan van de volgorde...');
      });
   }

   function allowDrop(ev) {
      ev.preventDefault();
   }

   function drag(ev) {
      ev.dataTransfer.setData("text", ev.target.title);
   }

   function drop(ev) {
      ev.preventDefault();
      var srcID = ev.dataTransfer.getData("text");
      var targetID = $(ev.target.parentElement).attr("data-id");

      var target = ev.target.parentElement;
      var source = document.getElementById(srcID)
      source = source.parentElement;

      var copy_to = $(target).clone(true);
      var copy_from = $(source).clone(true);
      $(target).replaceWith(copy_from);
      $(source).replaceWith(copy_to);
   }
</script>
<style>
   .dragger {
      width: 100%;
      height: 100%;
      position: absolute;
      top: 0;
      left: 0;
      z-index: 10;
      border: solid;
   }
</style>

<script type="text/javascript">
   $(document).ready(function () {
      @foreach(var grafiek in Model)
      {
         <text>
         var elem = document.getElementById('@grafiek.ID');
         if (elem != null) {
            Highcharts.chart('@grafiek.ID',
               {
                  @if (!(grafiek.Chart.Type.Equals("normal")))
                  {
                     <text>
                     chart:
                     {
                           @if(grafiek.Chart.Type.Equals("pie"))
                           {
                        <text>
                           plotBackgroundColor: null,
                           plotBorderWidth: null,
                     plotShadow: @grafiek.GetBoolString(grafiek.Chart.PlotShadow),
                        </text>
                     }
/**/
                        type: '@grafiek.Chart.Type'
                     },
                     </text>
                  }

                  title: {
                     text: '@grafiek.Titel'
                  },

                  @if (grafiek.Chart.Type.Equals("pie"))
                  {
                     <text>
                  tooltip: {
                     pointFormat: '@Html.Raw(grafiek.Tooltip)'
                  },
                     </text>
                  }

                  @if (grafiek.yAs.IsUsed == true)
                  {
                     <text>
                  yAxis: {
                     title: {
                        text: '@grafiek.yAs.Titel'
                     }
                  },
                  </text>
                  }

                  @if (grafiek.xAs.IsUsed == true)
                  {
                     <text>
                  xAxis: {
                     categories: @Html.Raw(grafiek.xAs.GetCategorieen())
                  },
                  </text>
                  }

                  @if (grafiek.Chart.Type.Equals("normal"))
                  {
                     <text>
                  xAxis: {
                     type: 'datetime'
                  },
                  </text>
                  }


                  @if (grafiek.Chart.Type.Equals("column"))
                  {
                     <text>
                  credits: {
                     enabled: @grafiek.GetBoolString(grafiek.Credits)
                  },
                     </text>
                  }

                  @if (grafiek.Legende.Layout != null){
                     <text>
                  legend: {
                     layout: '@grafiek.Legende.Layout',
                     align: '@grafiek.Legende.Alignment',
                     verticalAlign: '@grafiek.Legende.VerticalAlign'
                  },
                  </text>
                  }

                  @if (grafiek.PlotOptions.PointStart != null || grafiek.PlotOptions.Cursor != null)
                  {
                     <text>
                  plotOptions: {
                     @if (grafiek.Chart.Type.Equals("pie"))
                     {
                        <text>
                     pie: {
                           allowPointSelect: @grafiek.GetBoolString(grafiek.PlotOptions.AllowPointSelect),
                        cursor: '@grafiek.PlotOptions.Cursor',
                        dataLabels: {
                              enabled: @grafiek.GetBoolString(grafiek.PlotOptions.DataLabels)
                        },
                           showInLegend: @grafiek.GetBoolString(grafiek.PlotOptions.ShowInLegend)
                     }
                     </text>
                     }
                     else
                     {
                        <text>
                        series:
                        {
                           label:
                           {
                              connectorAllowed: @grafiek.PlotOptions.getBool(grafiek.PlotOptions.SeriesLabelConnector)
                              },
                              pointStart: @grafiek.PlotOptions.PointStart
                              @if (grafiek.Chart.Type.Equals("normal"))
                              {
                                 var PI = 0;
                                 switch (grafiek.TitelXAs)
                                 {
                                    case "dag":
                                       PI = 24 * 3600 * 1000;
                                       break;
                                    case "week":
                                       PI = 24 * 3600 * 1000 * 7;
                                       break;
                                 }
                                 <text>
                              , pointInterval: @PI</text>
                              }
                           }
                        </text>
                     }
                  },
                  </text>
                  }

                  series: [
                     @for(int i = 0; i < grafiek.Series.Count; i++)
                     {
                     var serie = grafiek.Series[i];
                           <text>
                     {
                        name: '@serie.Naam',
                        @if (grafiek.Chart.Type.Equals("pie"))
                        {
                           <text>
                        colorByPoint: @grafiek.GetBoolString(serie.ColorByPoint),
                        data: [
                           </text>
                           for(int j = 0; j < serie.Data.Count; j++)
                           {
                              var data = serie.Data[j];
                           <text>
                           {
                              name: '@data.Naam',
                              y: @data.Value.ToString().Replace(",", "."),
                              sliced: @grafiek.GetBoolString(data.Sliced),
                              selected: @grafiek.GetBoolString(data.Selected)
                           }
                        </text>
                           if (j != serie.Data.Count - 1)
                              {
                                 <text> , </text>
                              }
                           }
                           <text>] }</text>
                        }
                        else
                        {
                           <text>
                        data: @serie.GetDataString()
                           }
                           </text>
                        }

                     @if(i != grafiek.Series.Count - 1)
                              {
                                 <text>
                                 ,
                                 </text>
                              }
/**/
                        </text>
                     }
                  ]
               });
         };
         </text>
      }
   });


</script>