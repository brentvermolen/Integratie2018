@model MVCIntegratie.Models.PersoonModel
@using BL.Domain.BerichtKlassen;

@{
    ViewBag.Title = Model.Persoon.Naam;
}

<link href="~/Content/bootstrap.min.css">
<link rel="stylesheet" href="~/Content/Layout.css">
<script src="~/Scripts/bootstrap.min.js"></script>
<script src="https://code.highcharts.com/highcharts.js"></script>
<script src="https://code.highcharts.com/modules/series-label.js"></script>
<script src="https://code.highcharts.com/modules/exporting.js"></script>
<script src="https://code.highcharts.com/modules/export-data.js"></script>
<!--<script src="~/Scripts/Chart.js"></script>-->
<script src="~/Scripts/jquery-3.0.0.min.js"></script>
<script>
    //initialiaze and setup facebook js sdk
    window.fbAsyncInit = function () {
        FB.init({
            appId: '906366716198237',
            autoLogAppEvents: true,
            xfbml: true,
            version: 'v3.0'
        });

        } ;

    (function (d, s, id) {
        var js, fjs = d.getElementsByTagName(s)[0];
        if (d.getElementById(id)) { return; }
        js = d.createElement(s); js.id = id;
        js.src = "https://connect.facebook.net/en_US/sdk.js";
        fjs.parentNode.insertBefore(js, fjs);
        }(document, 'script', 'facebook-jssdk'));
    var userId = "'" + @Model.Persoon.Facebook.Split('/').Last() +"'";

    FB.api('/' + userId, function (response) {
        fbinfo = new Array();
        fbinfo[0] = response.id;
        fbinfo[1] = response.first_name;
        fbinfo[2] = response.last_name;
        fbinfo[3] = response.email;

        var im = document.getElementById("profileImage").setAttribute("src", "http://graph.facebook.com/" + response.id + "/picture?type=normal");
    });

        /* FB.api(
         '/userId/picture',
         'GET',
         {},
         function (response) {
             var fotoUrl = response.picture.data.url;
             document.getElementById('foto').innerHTML = "<img src='" + fotoUrl + "'>";
         }
                );*/
</script>
<div>

    <h2>@Model.Persoon.Naam</h2>
    <div id="foto"></div>
    <h4>Totaal berichten: @Model.Persoon.Berichten.Count</h4>
    <h4>@Model.Persoon.Organisatie.Naam</h4>
    <h4>@Model.Persoon.District</h4>
    <p>
        Twitter: @Model.Persoon.Twitter<br />
        Facebook: @Model.Persoon.Facebook<br />
    </p>
    <hr />
    <div class="row">
        <div class="col-md-12"><h5><strong>Vermeldingen per keywoord</strong></h5></div>

        @foreach (Woord woord in Model.Keywoorden)
        {

            <div class="col-md-3">
                @woord
                @woord.Berichten.Where(b => b.Mentions.Where(m => m.Tekst.Contains(Model.Persoon.Naam)) != null).Count()
            </div>
        }
    </div>



    <div class="row">
        <div class="col-md-12">
            <hr />
            <h5><strong>Links</strong></h5>
            <p>
                @foreach (Url url in Model.Urls)
                {
                    <a href="@url.Tekst"> @url.Tekst</a><br />
                }
            </p>
        </div>
    </div>
    <hr />
</div>

<div class="col-sm-12 col-md-12">
    <div id="@Model.Grafiek.ID" style="min-width: 310px; height: 250px; margin: 0 auto"></div>
</div>

<script>
         var elem = document.getElementById('@Model.Grafiek.ID');
         if (elem != null) {
            var chart = Highcharts.chart('@Model.Grafiek.ID',
               {
                  @if (!(Model.Grafiek.Chart.Type.Equals("normal")))
                  {
                     <text>
                     chart:
                     {
                           @if(Model.Grafiek.Chart.Type.Equals("pie"))
                           {
                        <text>
                           plotBackgroundColor: null,
                           plotBorderWidth: null,
                     plotShadow: @Model.Grafiek.GetBoolString(Model.Grafiek.Chart.PlotShadow),
                        </text>
                     }

                        type: '@Model.Grafiek.Chart.Type'
                     },
                     </text>
                  }

                  title: {
                     text: '@Model.Grafiek.Titel'
                  },

                  @if (Model.Grafiek.Chart.Type.Equals("pie"))
                  {
                     <text>
                  tooltip: {
                     pointFormat: '@Html.Raw(Model.Grafiek.Tooltip)'
                  },
                     </text>
                  }

                  @if (Model.Grafiek.yAs.IsUsed == true)
                  {
                     <text>
                  yAxis: {
                     title: {
                        text: '@Model.Grafiek.yAs.Titel'
                     }
                  },
                  </text>
                  }

                  @if (Model.Grafiek.xAs.IsUsed == true)
                  {
                     <text>
                  xAxis: {
                     categories: @Html.Raw(Model.Grafiek.xAs.GetCategorieen())
                  },
                  </text>
                  }

                  @if (Model.Grafiek.Chart.Type.Equals("normal"))
                  {
                     <text>
                  xAxis: {
                     type: 'datetime'
                  },
                  </text>
                  }


                  @if (Model.Grafiek.Chart.Type.Equals("column"))
                  {
                     <text>
                  credits: {
                     enabled: @Model.Grafiek.GetBoolString(Model.Grafiek.Credits)
                  },
                     </text>
                  }

                  @if (Model.Grafiek.Legende.Layout != null){
                     <text>
                  legend: {
                     layout: '@Model.Grafiek.Legende.Layout',
                     align: '@Model.Grafiek.Legende.Alignment',
                     verticalAlign: '@Model.Grafiek.Legende.VerticalAlign'
                  },
                  </text>
                  }

                  @if (Model.Grafiek.PlotOptions.PointStart != null || Model.Grafiek.PlotOptions.Cursor != null)
                  {
                     <text>
                  plotOptions: {
                     @if (Model.Grafiek.Chart.Type.Equals("pie"))
                     {
                        <text>
                     pie: {
                           allowPointSelect: @Model.Grafiek.GetBoolString(Model.Grafiek.PlotOptions.AllowPointSelect),
                        cursor: '@Model.Grafiek.PlotOptions.Cursor',
                        dataLabels: {
                              enabled: @Model.Grafiek.GetBoolString(Model.Grafiek.PlotOptions.DataLabels)
                        },
                           showInLegend: @Model.Grafiek.GetBoolString(Model.Grafiek.PlotOptions.ShowInLegend)
                     }
                     </text>
                     }
                     else
                     {
                        <text>
                        series:
                        {
                           label:
                           {
                              connectorAllowed: @Model.Grafiek.PlotOptions.getBool(Model.Grafiek.PlotOptions.SeriesLabelConnector)
                              },
                              @if (Model.Grafiek.Chart.Type.Equals("normal"))
                              {
                                 var PI = 0;
                                 switch (Model.Grafiek.TitelXAs)
                                 {
                                    case "dag":
                                       PI = 24 * 3600 * 1000;
                                       break;
                                    case "week":
                                       PI = 24 * 3600 * 1000 * 7;
                                       break;
                                 }
                                 <text>
                              pointStart: @Model.Grafiek.PlotOptions.PointStart
                              , pointInterval: @PI</text>
                              }
                           }
                        </text>
                     }
                  },
                  </text>
                  }

                  series: [
                     @for(int i = 0; i < Model.Grafiek.Series.Count; i++)
                     {
                     var serie = Model.Grafiek.Series[i];
                           <text>
                     {
                        name: '@serie.Naam',
                        @if (Model.Grafiek.Chart.Type.Equals("pie"))
                        {
                           <text>
                        colorByPoint: @Model.Grafiek.GetBoolString(serie.ColorByPoint),
                        data: [
                           </text>
                           for(int j = 0; j < serie.Data.Count; j++)
                           {
                              var data = serie.Data[j];
                           <text>
                           {
                              name: '@data.Naam',
                              y: @data.Value.ToString().Replace(",", "."),
                              sliced: @Model.Grafiek.GetBoolString(data.Sliced),
                              selected: @Model.Grafiek.GetBoolString(data.Selected)
                           }
                        </text>
                           if (j != serie.Data.Count - 1)
                              {
                                 <text> , </text>
                              }
                           }
                           <text>] }</text>
                        }
                        else
                        {
                           <text>
                        data: @serie.GetDataString()
                           }
                           </text>
                        }

                     @if(i != Model.Grafiek.Series.Count - 1)
                              {
                                 <text>
                                 ,
                                 </text>
                              }
/**/
                        </text>
                     }
                  ]
               });
         };
</script>

